import { NextRequest, NextResponse } from "next/server";
import getServerUser from "@/lib/auth-server";
import { GoogleGenerativeAI } from "@google/generative-ai";

const GEMINI_API_KEY = process.env.GEMINI_API_KEY!;
const UNSPLASH_ACCESS_KEY = process.env.UNSPLASH_ACCESS_KEY!;

const slidesPrompt = `
–°–æ–∑–¥–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–∞–π–¥ –≤ —Ç—ë–º–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º–µ, –∑–∞–Ω–∏–º–∞—é—â–∏–π –≤—Å—é —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É —ç–∫—Ä–∞–Ω–∞.
–ò—Å–ø–æ–ª—å–∑—É–π TailwindCSS –∏ Flowbite UI.
–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
–ò–∑–±–µ–≥–∞–π —Å–ª–∏—à–∫–æ–º –∫—Ä—É–ø–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏ —á–∏—Ç–∞–µ–º—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é.
–ü—Ä–∏–º–µ–Ω—è–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–∫–µ—Ç —Å –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º.
–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ HTML-—ç–ª–µ–º–µ–Ω—Ç <div> (–±–µ–∑ markdown –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤).
`;

export async function POST(req: NextRequest) {
    try {
        const { messages, projectDetail } = await req.json();
        const user = await getServerUser();
        if (!user || !user.userId) {
            return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
        }

        const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
        const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });

        // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const topic = projectDetail?.topic || projectDetail?.userInputPrompt || "AI presentation";
        const slideInfo = messages?.[0]?.content || "Default slide";

        const prompt = `
${slidesPrompt}

Project topic: "${topic}"
Slide info: "${slideInfo}"
`;

        const result = await model.generateContent(prompt);
        let htmlResponse = result.response.text()
            .replace(/```html/g, "")
            .replace(/```/g, "")
            .trim();
        if (!/<img/i.test(htmlResponse)) {
            const unsplashRes = await fetch(
                `https://api.unsplash.com/photos/random?query=${encodeURIComponent(topic)}&orientation=landscape&client_id=${UNSPLASH_ACCESS_KEY}`
            );
            const unsplashData = await unsplashRes.json();

            const imageUrl = unsplashData?.urls?.regular || null;

            if (imageUrl) {
                const imageBlock = `
          <div class="w-full mt-6 flex justify-center">
            <img src="${imageUrl}" alt="${topic}" class="rounded-xl shadow-lg max-h-[400px] object-cover" />
          </div>
        `;
                // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º </div> –∏–ª–∏ –≤ –∫–æ–Ω–µ—Ü
                htmlResponse = htmlResponse.replace(/<\/div>\s*$/, `${imageBlock}</div>`);
            }
        }


        return NextResponse.json({ html: htmlResponse });
    } catch (err: any) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /api/ai-slides:", err.message || err);

        // ‚úÖ –†–µ—Ç—Ä–∞–∏ –ø—Ä–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ
        if (err.message?.includes("overloaded")) {
            return NextResponse.json(
                { error: "Gemini –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.", code: "MODEL_OVERLOADED" },
                { status: 503 }
            );
        }

        if (err?.response?.status === 429) {
            return NextResponse.json(
                { error: "üö¶ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", code: "QUOTA_EXCEEDED" },
                { status: 429 }
            );
        }

        return NextResponse.json({ error: err.message }, { status: 500 });
    }
}
