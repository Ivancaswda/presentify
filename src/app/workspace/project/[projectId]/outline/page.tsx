"use client";
import React, { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { useQuery, useMutation } from "convex/react";
import { api } from "../../../../../../convex/_generated/api";
import SliderStyle from "@/app/workspace/project/[projectId]/outline/_components/SliderStyle";
import OutlineSection from "@/app/workspace/project/[projectId]/outline/_components/OutlineSection";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import {LoaderOne} from "@/components/ui/loader";
import {FaMagic, FaSave} from "react-icons/fa";

const OutlinePage = () => {
    const { projectId } = useParams();
    const router = useRouter();

    const project = useQuery(
        api.projects.getProjectDetails,
        projectId ? { projectId: projectId as string } : "skip"
    );

    const updateProjectOutline = useMutation(api.projects.updateProjectSlider);

    const [outline, setOutline] = useState(project?.outline || []);
    const [selectedStyle, setSelectedStyle] = useState<any>();
    const [loading, setLoading] = useState(false);
    const [saving, setSaving] = useState(false);
    console.log(project)
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø—Ä–æ–µ–∫—Ç–æ–º
    useEffect(() => {
        if (project) {
            setOutline(project.outline || []);
            setSelectedStyle(project.designStyle || null);
        }
    }, [project]);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AI
    const handleGenerateOutline = async () => {
        if (!project) return toast.error("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!");

        try {
            setLoading(true);
            toast.message("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏...");

            const res = await fetch("/api/ai-outliner", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    userInput: project.userInputPrompt,
                    slideCount: project.slideCount,
                }),
            });

            const data = await res.json();

            if (!res.ok) {
                console.error("‚ùå –û—à–∏–±–∫–∞:", data);
                toast.error(data.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!");
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º state –¥–ª—è UI
            setOutline(data);
            toast.success("–ü–ª–∞–Ω –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!");
        } catch (err: any) {
            console.error(err);
            toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI!");
        } finally {
            setLoading(false);
        }
    };

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–∞–π–¥–∞
    const handleUpdateOutline = async (slideNo: number, updatedSlide: any) => {
        const updatedOutline = outline.map(slide =>
            slide.slideNo === slideNo ? { ...slide, ...updatedSlide } : slide
        );

        setOutline(updatedOutline);

        if (!project?._id) return;

        try {
            await updateProjectOutline({
                projectId: project._id,
                outline: updatedOutline,
                designStyle: project.designStyle || null,
            });
        } catch (err) {
            console.error(err);
            toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–ª–∞–π–¥–∞!");
        }
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (outline + —Å—Ç–∏–ª—å)
    const onUpdateSlider = async () => {
        if (!project?._id) return toast.error("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        if (!selectedStyle) return toast.error("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å!");

        try {
            setSaving(true);
            toast.message("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...");

            const normalizedOutline = outline.map(item => ({
                ...item,
                slideNo: String(item.slideNo),
            }));

            await updateProjectOutline({
                projectId: project._id,
                designStyle: selectedStyle,
                outline: normalizedOutline,
            });

            router.push(`/workspace/project/${projectId}/editor`);
            toast.success("–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!");
        } catch (error: any) {
            console.error(error);
            toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!");
        } finally {
            setSaving(false);
        }
    };

    if (project === undefined) {
        return <div className='flex items-center justify-center w-screen h-screen'>
            <LoaderOne/>
        </div>;
    }

    if (project === null) {
        return <div className="p-6 text-red-500 flex mt-20 items-center justify-center">
            –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢</div>;
    }


    return (
        <div className="flex items-center justify-center mt-20">
            <div className="max-w-3xl w-full px-4">
                <h2 className="font-semibold text-2xl mb-6">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>


                <SliderStyle selectStyle={(value: any) => setSelectedStyle(value)} />


                <div className="mt-6 flex justify-center w-full">
                    <Button
                        onClick={handleGenerateOutline}
                        disabled={loading || outline.length !== 0}
                        className="bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary/80 transition disabled:opacity-50"
                    >
                        <FaMagic/>
                        {loading ? "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è..." : "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω"}
                    </Button>
                </div>


                <div className="mt-8">
                    <OutlineSection
                        handleUpdateOutline={handleUpdateOutline}
                        loading={loading}
                        outline={outline}
                    />
                </div>


                <div className="flex justify-center mt-8 mb-16">
                    <Button
                        onClick={onUpdateSlider}
                        disabled={saving || outline.length === 0}
                        className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition disabled:opacity-50"
                    >
                        <FaSave/>
                        {saving ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"}
                    </Button>
                </div>
            </div>
        </div>
    );
};

export default OutlinePage;
