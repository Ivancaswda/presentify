import {NextRequest, NextResponse} from "next/server";
import getServerUser from "@/lib/auth-server";
import {GoogleGenerativeAI} from "@google/generative-ai";


import {redirect} from "next/navigation";


const GEMINI_API_KEY = process.env.GEMINI_API_KEY!;

const outlinePrompt = `
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ PowerPoint –ø–æ —Ç–µ–º–µ "{userInput}".

–°–æ–∑–¥–∞–π {slideCount} —Å–ª–∞–π–¥–æ–≤. –ö–∞–∂–¥—ã–π —Å–ª–∞–π–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
- –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã ("slidePoint");
- –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ 2 —Å—Ç—Ä–æ–∫–∏ ("outline"), –æ–±—ä—è—Å–Ω—è—é—â–µ–µ, –æ —á—ë–º —ç—Ç–æ—Ç —Å–ª–∞–π–¥.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–µ–π:
1. –ü–µ—Ä–≤—ã–π —Å–ª–∞–π–¥ ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω.
2. –í—Ç–æ—Ä–æ–π —Å–ª–∞–π–¥ ‚Äî —ç–∫—Ä–∞–Ω —Å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ–º / –ø–ª–∞–Ω–æ–º.
3. –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–∞–π–¥ ‚Äî —ç–∫—Ä–∞–Ω "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ".

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–∞:

[
  {
    "slideNo": "",
    "slidePoint": "",
    "outline": ""
  }
]
`;
export function cleanJSON(content: string) {
    // –£–¥–∞–ª—è–µ–º markdown-—Ä–∞–∑–º–µ—Ç–∫—É –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    return content.replace(/```json/g, "")
        .replace(/```/g, "")
        .replace(/\n/g, "")
        .replace(/\s{2,}/g, " ")
        .replace(/\r?\n|\r/g, "")
        .trim();
}

export function safeParseJSON(jsonString: string) {
    const cleaned = cleanJSON(jsonString);
    try {
        return { ok: true, data: JSON.parse(cleaned) };
    } catch (error: any) {
        return { ok: false, raw: jsonString, error: error.message };
    }
}


export async function POST(req: NextRequest) {
    try {
        const {  userInput, slideCount } = await req.json();
        const user = await getServerUser();
        if (!user) {
            return NextResponse.json({ error: "No authorized" }, { status: 401 });
        }






        if (!user || !user.userId) {
            return NextResponse.json({ error: "No authorized"})
        }



        const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
        const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-lite" });

        const prompt = outlinePrompt.replace('{userInput}', userInput)
            .replace('{slideCount}', slideCount)
        const fullPrompt = [
            { role: "system", content:   prompt},
        ];

        const result = await model.generateContent(fullPrompt.map(m => m.content).join("\n"));

        const parsed = safeParseJSON(result.response.text());
        if (!parsed.ok) {
            return NextResponse.json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç Gemini", raw: result.response.text() }, { status: 500 });
        }

        return NextResponse.json(parsed.data);

    } catch (err: any) {

        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /api/budget Gemini SDK:", err);


        if (err?.response?.status === 429) {
            return NextResponse.json(
                { error: "üö¶ –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ API-–∫–ª—é—á –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", code: "QUOTA_EXCEEDED" },
                { status: 429 }
            );
        }


        return NextResponse.json({ error: err.message }, { status: 500 });
    }
}
